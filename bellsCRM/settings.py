"""
Django settings for bellsCRM project.

Generated by 'django-admin startproject' using Django 2.1.15.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from boto3.session import Session
import boto3
import json
from enum import Enum
import pymysql
pymysql.install_as_MySQLdb()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
STATIC_DIR = os.path.join(BASE_DIR, 'static')

class SettingsType(Enum):
    LOCAL = 'LOCAL'
    BETA = 'BETA'
    PROD = 'PROD'
    DEV = 'DEV'

SETTINGS_TYPE = SettingsType.LOCAL

ENVIRONMENT_TYPE = os.getenv('ENVIRONMENT_TYPE')
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')

if ENVIRONMENT_TYPE == 'LOCAL':
    SETTINGS_TYPE = SettingsType.LOCAL
elif ENVIRONMENT_TYPE == 'BUILD_BETA' or ENVIRONMENT_TYPE == 'BETA':
    SETTINGS_TYPE = SettingsType.BETA
elif ENVIRONMENT_TYPE == 'BUILD_PROD' or ENVIRONMENT_TYPE == 'PROD':
    SETTINGS_TYPE = SettingsType.PROD
elif ENVIRONMENT_TYPE == 'BUILD_DEV' or ENVIRONMENT_TYPE == 'DEV':
    SETTINGS_TYPE = SettingsType.DEV
else:
    import environ
    env = environ.Env()
    environ.Env.read_env()
    AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
    print(f'No valid environment {ENVIRONMENT_TYPE} variable set for SETTINGS_TYPE, defaulting to LOCAL')
    SETTINGS_TYPE = SettingsType.LOCAL

print(f'SETTINGS_TYPE is {SETTINGS_TYPE.value}, ENVIRONMENT_TYPE is {ENVIRONMENT_TYPE} environment)')

if SETTINGS_TYPE.value == 'PROD':
    secret_session = boto3.session.Session()
    client = secret_session.client(
        service_name ='secretsmanager',
        aws_access_key_id = AWS_ACCESS_KEY_ID,
        aws_secret_access_key = AWS_SECRET_ACCESS_KEY,
        region_name = "ap-southeast-2"
    )

    get_keys = client.get_secret_value(SecretId="prod/bellscrm")
    
else:
    secret_session = boto3.session.Session()
    client = secret_session.client(
        service_name ='secretsmanager',
        aws_access_key_id = AWS_ACCESS_KEY_ID,
        aws_secret_access_key = AWS_SECRET_ACCESS_KEY,
        region_name = "ap-south-1"
    )

    get_keys = client.get_secret_value(SecretId="")
    
if 'SecretString' in get_keys:
    secret = get_keys['SecretString']
    secret = json.loads(secret)

SECRET_KEY = secret.get('SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_results',
    'widget_tweaks',
    'django.contrib.sites',
    'django_celery_beat',
    'ckeditor',    
    'userauth',
    'bellscrm_admin',
    'company_admin',
    'employee',
    'django_hosts',
    'website',
    'rostering',
    'django_recaptcha',
    'rangefilter'
]

SITE_ID = 1

ROOT_URLCONF = 'bellsCRM.urls'
AUTH_USER_MODEL = 'userauth.Person'

DEFAULT_HOST = 'www'
if SETTINGS_TYPE.value in ['PROD','BETA']:
    HOST_SCHEME = 'https://'
    PARENT_HOST = 'bellscrm.com.au'
else:
    HOST_SCHEME = 'http://'
    PARENT_HOST = 'localhost:8000'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_hosts.middleware.HostsRequestMiddleware',
]

ROOT_HOSTCONF = 'bellsCRM.hosts'
CSRF_TRUSTED_ORIGINS = ['https://*.ngrok.io','https://a8f9-117-208-68-2.ngrok-free.app','https://*.bellscrm.com.au']

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bellsCRM.wsgi.application'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

RECAPTCHA_PUBLIC_KEY = ""
RECAPTCHA_PRIVATE_KEY = ""

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases


if SETTINGS_TYPE.value == 'PROD':
    DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.mysql',
                'NAME': '',
                'USER': '',
                'PASSWORD': '',
                'HOST': '',
                'PORT': 3306,
                'OPTIONS': {
                    "init_command": "SET foreign_key_checks = 0;",
                    'charset': 'utf8mb4',

                },
            }
        }
elif SETTINGS_TYPE.value == 'BETA':
    DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.mysql',
                'NAME': '',
                'USER': '',
                'PASSWORD': '',
                'HOST': '',
                'PORT': 3306,
                'OPTIONS': {
                    "init_command": "SET foreign_key_checks = 0;",
                    'charset': 'utf8mb4',

                },
            }
        }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
    
    
# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        'OPTIONS': {
            'max_similarity': 0.5,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Australia/Tasmania'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    STATIC_DIR,
] 
STATIC_ROOT = os.path.join(BASE_DIR, 'assets')

if SETTINGS_TYPE.value == 'PROD':
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_S3_REGION_NAME = ''
    AWS_MEDIA_BUCKET_NAME = ''
    AWS_MEDIA_S3_CUSTOM_DOMAIN = f"{AWS_MEDIA_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com"
    DEFAULT_FILE_STORAGE = 'lib.storage_backends.MediaStorage'
    MEDIA_URL = f'https://{AWS_MEDIA_S3_CUSTOM_DOMAIN}/media/'
    
    
elif SETTINGS_TYPE.value == 'BETA':
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_S3_REGION_NAME = ''
    AWS_MEDIA_BUCKET_NAME = ''
    AWS_MEDIA_S3_CUSTOM_DOMAIN = f"{AWS_MEDIA_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com"
    DEFAULT_FILE_STORAGE = 'lib.storage_backends.MediaStorage'
    MEDIA_URL = f'https://{AWS_MEDIA_S3_CUSTOM_DOMAIN}/media/'
    
else:
    
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


LOGIN_URL = '/'

# CELERY_BROKER_URL = 'redis://localhost:6379/0'
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
# CELERY_TIMEZONE = 'UTC'

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Set up AWS credentials

# CELERY_AWS_ACCESS_KEY_ID = secret.get("AWS_ACCESS_KEY_ID")
# CELERY_AWS_SECRET_ACCESS_KEY = secret.get("AWS_SECRET_ACCESS_KEY")
#Celery settings



CELERY_accept_content = ['application/json']
CELERY_task_serializer = 'json'
if SETTINGS_TYPE.value == 'PROD':
    CELERY_TASK_DEFAULT_QUEUE = ''
else:
    CELERY_TASK_DEFAULT_QUEUE = ''
CELERY_BROKER_URL = "sqs://%s:%s@" % (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)

CELERY_result_backend = "django-db"



# django setting.
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'my_cache_table',
    }

}

from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = ""
EMAIL_HOST_PASSWORD = ''


logger_boto3_session = None
if SETTINGS_TYPE == SettingsType.PROD:
    logger_boto3_session = Session(
        aws_access_key_id = AWS_ACCESS_KEY_ID,
        aws_secret_access_key = AWS_SECRET_ACCESS_KEY,
        region_name = '',
    )

if SETTINGS_TYPE == SettingsType.BETA:
    logger_boto3_session = Session(
        aws_access_key_id = AWS_ACCESS_KEY_ID,
        aws_secret_access_key = AWS_SECRET_ACCESS_KEY,
        region_name = '',
    )


log_group = ""
if SETTINGS_TYPE == SettingsType.PROD:
    log_group =""

elif SETTINGS_TYPE == SettingsType.BETA:
    log_group =""

elif SETTINGS_TYPE == SettingsType.LOCAL:
    pass
else:
    raise ValueError("Invalid setting_type. Must be 'BETA','PROD', 'LOCAL'")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "aws": {
            "format": "%(asctime)s [%(levelname)-8s] %(message)s [%(pathname)s:%(lineno)d]",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "watchtower": {
            "level": "INFO",
            "class": "watchtower.CloudWatchLogHandler",
            "boto3_session": logger_boto3_session,
            "log_group": "bellscrm-staging-mumbai" if SETTINGS_TYPE == SettingsType.BETA else "dummy-log-group",
            "stream_name": "bellscrm-staging-mumbai-stream" if SETTINGS_TYPE == SettingsType.BETA else "dummy-prod-stream",
            "formatter": "aws",
        },
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "aws",
        },
    },
    "loggers": {
        "watchtower": {
            "level": "INFO",
            "handlers": ["watchtower"],
            "propagate": False,
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}

